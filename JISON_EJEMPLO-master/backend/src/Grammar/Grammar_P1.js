/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_P1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[5,7,23,24,25,26,27,49],$V8=[1,20],$V9=[18,50],$Va=[1,45],$Vb=[1,42],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,43],$Vj=[1,44],$Vk=[1,47],$Vl=[1,49],$Vm=[10,18],$Vn=[1,54],$Vo=[1,56],$Vp=[1,55],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[10,18,28,30,31,32,33,34,35,36,37,38,39,40,50,84,86,88,89,90],$VB=[1,79],$VC=[1,77],$VD=[1,91],$VE=[1,90],$VF=[1,88],$VG=[1,89],$VH=[1,85],$VI=[1,84],$VJ=[1,87],$VK=[1,86],$VL=[5,7,23,24,25,26,27,49,67,69,79,86,88,90],$VM=[86,88,90],$VN=[1,128],$VO=[1,129],$VP=[1,133],$VQ=[10,18,28,30,33,34,35,36,37,38,39,40,50,84,86,88,89,90],$VR=[10,18,33,34,35,36,37,38,39,40,50,84,86,88,89,90],$VS=[10,18,37,38,39,40,50,84,86,88,89,90],$VT=[10,86,88,90],$VU=[1,168],$VV=[1,169];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"void":7,"main":8,"(":9,")":10,"BLOCK_CONT":11,"identifier":12,"PARAMETRO_METODO":13,"TIPO_PARAMETRO":14,"BLOCK_CONT_P":15,"DECLARACION_V":16,"VARIABLE":17,",":18,"VARIABLES":19,"=":20,"EXPRESION":21,"PARAMETRO_MCONT":22,"int":23,"String":24,"float":25,"bool":26,"char":27,"-":28,"!":29,"+":30,"*":31,"/":32,"<":33,">":34,">=":35,"<=":36,"==":37,"!=":38,"||":39,"&&":40,"decimal":41,"true":42,"false":43,"cadena":44,"digito":45,"caracter":46,"METODO_EXP":47,"L_exp":48,"TIPO":49,";":50,"Asignacion":51,"CONT":52,"CONSOLE":53,"WHILE":54,"DO":55,"SWITCH":56,"BREAK":57,"CONTINIUE":58,"RETURN_SINP":59,"INCREMENT":60,"DECREMENT":61,"LLAMADA_IDVALROES":62,"FOR":63,"IF":64,"CONT_P":65,"RETURN_CONP":66,"if":67,"CONDITION":68,"else":69,"for":70,"Dec_For":71,"ListaValores":72,"incremento":73,"decremento":74,"break":75,"CONTINUE":76,"continue":77,"return":78,"while":79,"console":80,".":81,"write":82,"switch":83,"{":84,"CASE":85,"}":86,"CASES":87,"case":88,":":89,"default":90,"do":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"void",8:"main",9:"(",10:")",12:"identifier",18:",",20:"=",23:"int",24:"String",25:"float",26:"bool",27:"char",28:"-",29:"!",30:"+",31:"*",32:"/",33:"<",34:">",35:">=",36:"<=",37:"==",38:"!=",39:"||",40:"&&",41:"decimal",42:"true",43:"false",44:"cadena",45:"digito",46:"caracter",49:"TIPO",50:";",58:"CONTINIUE",67:"if",69:"else",70:"for",73:"incremento",74:"decremento",75:"break",77:"continue",78:"return",79:"while",80:"console",81:".",82:"write",83:"switch",84:"{",86:"}",88:"case",89:":",90:"default",91:"do"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,6],[6,5],[6,6],[6,5],[6,1],[17,3],[17,1],[19,1],[19,3],[13,3],[13,1],[22,2],[14,1],[14,1],[14,1],[14,1],[14,1],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[47,4],[47,3],[47,1],[48,3],[48,1],[16,3],[51,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,2],[52,2],[52,1],[52,1],[52,1],[52,4],[52,1],[52,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,2],[65,1],[65,2],[65,1],[65,1],[65,1],[65,4],[65,1],[64,3],[64,5],[64,6],[63,9],[63,9],[71,5],[62,5],[72,3],[72,1],[60,2],[61,2],[57,2],[76,2],[59,2],[66,3],[54,3],[53,7],[68,3],[56,5],[85,2],[85,1],[87,4],[87,3],[87,4],[87,3],[55,6],[11,3],[11,2],[15,3],[15,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$= new Tree($$[$0-1]);   console.log("ya");return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 3: case 11:
this.$ =[$$[$0]];
break;
case 4:
this.$=new Main( this._$.first_line,this._$.first_column ,$$[$0-3],$$[$0]); return this.$;
break;
case 5:
this.$=new void_parametros( this._$.first_line,this._$.first_column ,$$[$0-4],$$[$0-2],$$[$0]);return this.$;
break;
case 6:
this.$=new void_vacio( this._$.first_line,this._$.first_column ,$$[$0-4],$$[$0]);return this.$;
break;
case 7:
this.$=new FuncionParams( this._$.first_line,this._$.first_column ,$$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);return this.$;
break;
case 8:
this.$=new FunctionVacio( this._$.first_line,this._$.first_column ,$$[$0-4],$$[$0-3],$$[$0]); this.$;
break;
case 9: case 12: case 99: case 100:
this.$ =$$[$0];
break;
case 10: case 14: case 87:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 13:
this.$=new Asigna( this._$.first_line,this._$.first_column ,$$[$0-2],$$[$0]);
break;
case 15:
 this.$ = [$$[$0]]; 
break;
case 16:
this.$=new ID_PARAMETRO( this._$.first_line,this._$.first_column ,$$[$0]);
break;
case 17: case 18: case 19: case 20: case 21:
this.$=new TipoVar( this._$.first_line,this._$.first_column ,$$[$0]);
break;
case 22:
this.$=new Conditional('-',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 23:
this.$=new Conditional('-',$$[$0], this._$.first_line,this._$.first_column );
break;
case 24:
this.$=new Operacion($$[$0-2],'+',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 25:
this.$=new Operacion($$[$0-2],'-',$$[$0], this._$.first_line,this._$.first_column );
break;
case 26:
this.$=new Operacion($$[$0-2],'*',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 27:
this.$=new Operacion($$[$0-2],'/',$$[$0], this._$.first_line,this._$.first_column );
break;
case 28:
this.$=new Relational($$[$0-2],'<',$$[$0], this._$.first_line,this._$.first_column );
break;
case 29:
this.$=new Relational($$[$0-2],'>',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 30:
this.$=new Relational($$[$0-2],'>=',$$[$0], this._$.first_line,this._$.first_column );
break;
case 31:
this.$=new Relational($$[$0-2],'<=',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 32:
this.$=new Relational($$[$0-2],'==',$$[$0], this._$.first_line,this._$.first_column );
break;
case 33:
this.$=new Relational($$[$0-2],'!=',$$[$0], this._$.first_line,this._$.first_column );
break;
case 34:
this.$=new Relational($$[$0-2],'||',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 35:
this.$=new Relational($$[$0-2],'&&',$$[$0] ,this._$.first_line,this._$.first_column );
break;
case 36: case 37: case 38: case 39: case 40: case 41: case 42:
this.$=new Primitivo($$[$0],this._$.first_line,this._$.first_column );
break;
case 43: case 106: case 108:
this.$ =$$[$0-1];
break;
case 49:
this.$=new DECLA(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1] );
break;
case 51:
this.$ = $$[$0]; return this.$;
break;
case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 64: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 79:
this.$ = $$[$0];
break;
case 63:
this.$ = $$[$0-3]
break;
case 65: case 97:
this.$ = $$[$0-1];
break;
case 78:
this.$ = $$[$0-3];
break;
case 80:
this.$ = new IFS($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column);
break;
case 81:
this.$ = new If($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 82:
this.$ = 
 new If($$[$0-4], $$[$0-3], [$$[$0-1]], this._$.first_line, this._$.first_column);
break;
case 83:
this.$ = new Increment($$[$0-8],$$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],this._$.first_line,
 this._$.first_column);
break;
case 84:
this.$ = new Increment($$[$0-8],$$[$0-6], $$[$0-5],$$[$0-4],$$[$0-3],this._$.first_line, this._$.first_column);
break;
case 85:
this.$ = new DecFor( this._$.first_line, this._$.first_column,$$[$0-4],$$[$0-3],$$[$0-2]);
break;
case 86:
this.$ = new DecFor( this._$.first_line, this._$.first_column,$$[$0-4],$$[$0-3]);
break;
case 88:
this.$ = [$$[$0]];
break;
case 89:
this.$ = new Increment( this._$.first_line, this._$.first_column,$$[$0-1]);
break;
case 90:
this.$ = new Decrement( this._$.first_line, this._$.first_column,$$[$0-1]);
break;
case 91:
this.$ = new breaks( this._$.first_line, this._$.first_column,$$[$0-1]);
break;
case 92:
this.$ = new continues( this._$.first_line, this._$.first_column,$$[$0-1]);
break;
case 93:
this.$ = new returnN( this._$.first_line, this._$.first_column,$$[$0-1]);
break;
case 94:
this.$ = new ReturnPs( this._$.first_line, this._$.first_column,$$[$0-2],$$[$0-1]);
break;
case 95:
 this.$ = new WHILES(this._$.first_line , this._$.first_column , $$[$0-2],$$[$0-1],$$[$0] );
break;
case 96:
 this.$ = new Console(this._$.first_line , this._$.first_column , $$[$0-2] );
break;
case 98:
 this.$ = new Switchs(this._$.first_line , this._$.first_column , $$[$0-4],$$[$0-3],$$[$0-1] );
break;
case 101: case 103:
 this.$ = new Cases(this._$.first_line , this._$.first_column , $$[$0-3],$$[$0-2],$$[$0] );
break;
case 102: case 104:
 this.$ = new Cases(this._$.first_line , this._$.first_column , $$[$0-2],$$[$0-1],$$[$0] );
break;
case 105:
this.$=new  DOs( this._$.first_line,this._$.first_column,$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2] );
break;
case 107: case 109:
this.$ =[];
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,14:5,16:6,23:$V1,24:$V2,25:$V3,26:$V4,27:$V5,49:$V6},{1:[3]},{5:[1,13],6:14,7:$V0,14:5,16:6,23:$V1,24:$V2,25:$V3,26:$V4,27:$V5,49:$V6},o($V7,[2,3]),{8:[1,15],12:[1,16]},{12:[1,17]},o($V7,[2,9]),{12:[2,17]},{12:[2,18]},{12:[2,19]},{12:[2,20]},{12:[2,21]},{12:$V8,17:18,19:19},{1:[2,1]},o($V7,[2,2]),{9:[1,21]},{9:[1,22]},{9:[1,23]},{18:[1,25],50:[1,24]},o($V9,[2,11]),o($V9,[2,12],{20:[1,26]}),{10:[1,27]},{10:[1,29],13:28,14:31,22:30,23:$V1,24:$V2,25:$V3,26:$V4,27:$V5},{10:[1,33],13:32,14:31,22:30,23:$V1,24:$V2,25:$V3,26:$V4,27:$V5},o([5,7,23,24,25,26,27,49,86,88,90],[2,49]),{12:$V8,19:34},{9:$Va,12:$Vb,21:35,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{11:46,84:$Vk},{10:[1,48],18:$Vl},{11:50,84:$Vk},o($Vm,[2,15]),{12:[1,51]},{10:[1,52],18:$Vl},{15:53,84:$Vn},o($V9,[2,10]),o($V9,[2,13],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz}),{9:$Va,12:$Vb,21:67,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:68,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},o($VA,[2,36]),o($VA,[2,37]),o($VA,[2,38]),o($VA,[2,39]),o($VA,[2,40]),o($VA,[2,41]),o($VA,[2,42]),{9:$Va,12:$Vb,21:69,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},o($V7,[2,4]),{12:$VB,16:83,49:$V6,52:70,53:72,54:73,55:74,56:75,57:76,58:$VC,59:78,62:80,63:81,64:82,67:$VD,70:$VE,75:$VF,78:$VG,79:$VH,80:$VI,83:$VJ,86:[1,71],91:$VK},{11:92,84:$Vk},{14:31,22:93,23:$V1,24:$V2,25:$V3,26:$V4,27:$V5},o($V7,[2,6]),o($Vm,[2,16]),{15:94,84:$Vn},o($V7,[2,8]),{12:[1,103],16:108,49:$V6,53:97,54:98,55:99,56:100,57:101,58:[1,102],62:105,63:106,64:107,65:95,66:104,67:$VD,70:$VE,75:$VF,78:[1,109],79:$VH,80:$VI,83:$VJ,86:[1,96],91:$VK},{9:$Va,12:$Vb,21:110,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:111,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:112,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:113,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:114,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:115,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:116,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:117,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:118,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:119,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:120,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:121,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},o($VA,[2,22]),o($VA,[2,23]),{10:[1,122],28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz},{86:[1,123]},o($VL,[2,107]),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VM,[2,54]),o($VM,[2,55]),o($VM,[2,56]),o($VM,[2,57]),{9:[1,126],20:[1,130],51:127,60:124,61:125,73:$VN,74:$VO},o($VM,[2,60]),o($VM,[2,61]),o($VM,[2,62]),o($VM,[2,64]),{81:[1,131]},{9:$VP,68:132},{11:134,84:$Vk},{9:$Va,12:$Vb,21:135,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{50:[1,136]},{50:[1,137]},{9:[1,138]},{9:$VP,68:139},o($V7,[2,5]),o($Vm,[2,14]),o($V7,[2,7]),{86:[1,140]},o($V7,[2,109]),{86:[2,66]},{86:[2,67]},{86:[2,68]},{86:[2,69]},{86:[2,70]},{86:[2,71]},{9:[1,143],60:141,61:142,73:$VN,74:$VO},{86:[2,73]},{86:[2,75]},{86:[2,76]},{86:[2,77]},{86:[2,79]},{9:$Va,12:$Vb,21:144,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},o($VQ,[2,24],{31:$Vq,32:$Vr}),o($VQ,[2,25],{31:$Vq,32:$Vr}),o($VA,[2,26]),o($VA,[2,27]),o($VR,[2,28],{28:$Vo,30:$Vp,31:$Vq,32:$Vr}),o($VR,[2,29],{28:$Vo,30:$Vp,31:$Vq,32:$Vr}),o($VR,[2,30],{28:$Vo,30:$Vp,31:$Vq,32:$Vr}),o($VR,[2,31],{28:$Vo,30:$Vp,31:$Vq,32:$Vr}),o($VS,[2,32],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv}),o($VS,[2,33],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv}),o([10,18,39,50,84,86,88,89,90],[2,34],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,40:$Vz}),o([10,18,39,40,50,84,86,88,89,90],[2,35],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx}),o($VA,[2,43]),o($VL,[2,106]),o($VM,[2,58]),o($VM,[2,59]),{9:$Va,10:[1,145],12:$Vb,21:147,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,72:146},o($VM,[2,65]),{50:[1,148]},{50:[1,149]},{9:$Va,12:$Vb,21:150,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{82:[1,151]},{11:152,84:$Vk},{9:$Va,12:$Vb,21:153,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{79:[1,154]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,84:[1,155]},o($VM,[2,91]),o($VM,[2,93]),{49:[1,157],71:156},{11:158,84:$Vk},o($V7,[2,108]),{86:[2,72]},{86:[2,74]},{9:$Va,10:[1,159],12:$Vb,21:147,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj,72:146},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,50:[1,160]},{50:[1,161]},{10:[1,162],18:[1,163]},o($Vm,[2,88],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz}),o($VT,[2,89]),o($VT,[2,90]),o($VM,[2,50],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz}),{9:[1,164]},o($VM,[2,95]),{10:[1,165],28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz},o($VM,[2,105]),{85:166,87:167,88:$VU,90:$VV},{9:$Va,12:$Vb,21:170,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{12:[1,171]},o($VM,[2,80],{69:[1,172]}),{50:[1,173]},{86:[2,94]},o($VM,[2,63]),{50:[1,174]},{9:$Va,12:$Vb,21:175,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:176,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{84:[2,97]},{86:[1,177],87:178,88:$VU,90:$VV},o($VM,[2,100]),{9:$Va,12:$Vb,21:179,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{9:$Va,12:$Vb,21:180,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,50:[1,181]},{20:[1,182]},{11:183,84:$Vk},{86:[2,78]},o($VM,[2,86]),o($Vm,[2,87],{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz}),{10:[1,184],28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz},o($VM,[2,98]),o($VM,[2,99]),{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,89:[1,185]},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,89:[1,186]},{12:[1,187]},{9:$Va,12:$Vb,21:188,28:$Vc,29:$Vd,41:$Ve,42:$Vf,43:$Vg,44:$Vh,45:$Vi,46:$Vj},o($VM,[2,81],{64:189,67:$VD}),{50:[1,190]},o($VM,[2,102],{53:72,54:73,55:74,56:75,57:76,59:78,62:80,63:81,64:82,16:83,52:191,12:$VB,49:$V6,58:$VC,67:$VD,70:$VE,75:$VF,78:$VG,79:$VH,80:$VI,83:$VJ,91:$VK}),o($VM,[2,104],{53:72,54:73,55:74,56:75,57:76,59:78,62:80,63:81,64:82,16:83,52:192,12:$VB,49:$V6,58:$VC,67:$VD,70:$VE,75:$VF,78:$VG,79:$VH,80:$VI,83:$VJ,91:$VK}),{60:193,61:194,73:$VN,74:$VO},{28:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,38:$Vx,39:$Vy,40:$Vz,50:[1,195]},o($VM,[2,82]),o($VM,[2,96]),o($VM,[2,101]),o($VM,[2,103]),{10:[1,196]},{10:[1,197]},o([9,12,28,29,41,42,43,44,45,46],[2,85]),{11:198,84:$Vk},{11:199,84:$Vk},o($VM,[2,83]),o($VM,[2,84])],
defaultActions: {7:[2,17],8:[2,18],9:[2,19],10:[2,20],11:[2,21],13:[2,1],97:[2,66],98:[2,67],99:[2,68],100:[2,69],101:[2,70],102:[2,71],104:[2,73],105:[2,75],106:[2,76],107:[2,77],108:[2,79],141:[2,72],142:[2,74],160:[2,94],165:[2,97],173:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    const {Tree} = require('../Simbols/Tree');
  const {void_vacio} = require('../clasesArbol/void_vacio');
  
  const {void_parametros} = require('../clasesArbol/void_Parametros');
  
  const {FunctionVacio} = require('../clasesArbol/FunctionVacio');
  
  
  const {FuncionParams} = require('../clasesArbol/FuncionParams');
  const {TipoVar} = require('../clasesArbol/TipoVar');
    const {ID_PARAMETRO} = require('../clasesArbol/ID_PARAMETRO');
  const {LlamadaV} = require('../clasesArbol/LlamadaV');
    const {Main} = require('../clasesArbol/Main');
     const {Console} = require('../clasesArbol/Console');
     const {Primitivo} = require('../clasesArbol/Primitivo');
     const {Relational} = require('../clasesArbol/Relational');
  const {DECLA} = require('../clasesArbol/DECLARACION');

     const {Operacion} = require('../clasesArbol/Operacion');
     const {Conditional} = require('../clasesArbol/Conditional');
     const {Asigna} = require('../clasesArbol/Asignacion');
        const {IFS} = require('../clasesArbol/IF');
           const {DOs} = require('../clasesArbol/DO');
        const {WHILES} = require('../clasesArbol/WHILE');
           const {continues} = require('../clasesArbol/Continue');
     
        const {Cases} = require('../clasesArbol/Case');        
        const {Switchs} = require('../clasesArbol/Switch');
        const {DecFor} = require('../clasesArbol/DecFor');
        const {Decrement} = require('../clasesArbol/Decrement');
        
        const {breaks} = require('../clasesArbol/Break');
      const {Increment} = require('../clasesArbol/Increment');
       const {ReturnPs} = require('../clasesArbol/ReturnP');
              const {returnN} = require('../clasesArbol/Return');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 45
break;
case 1:return 41 
break;
case 2:return 46
break;
case 3:return 44
break;
case 4:return 31
break;
case 5:return 32
break;
case 6:return 81
break;
case 7:return 50
break;
case 8:return 28
break;
case 9:return 30
break;
case 10:return 73
break;
case 11:return 74
break;
case 12:return 31
break;
case 13:return 33
break;
case 14:return 34
break;
case 15:return 36
break;
case 16:return 35
break;
case 17:return 37
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return 40
break;
case 21:return 29
break;
case 22:return 20
break;
case 23:return 9
break;
case 24:return 10  
break;
case 25:return '['
break;
case 26:return ']'
break;
case 27:return 84
break;
case 28:return 86
break;
case 29:return 42
break;
case 30:return 43
break;
case 31:return 'print'
break;
case 32:return 67
break;
case 33:return 69
break;
case 34:return 75
break;
case 35:return 77
break;
case 36:return 79
break;
case 37:return 26
break;
case 38:return 25
break;
case 39:return 23
break;
case 40:return 70
break;
case 41:return 27
break;
case 42:return 24
break;
case 43:return 7
break;
case 44:return 'public'
break;
case 45:return 90
break;
case 46:return 'private'
break;
case 47:return 8
break;
case 48:return 83
break;
case 49:return 88
break;
case 50:return 75
break;
case 51:return 78
break;
case 52:return 77
break;
case 53:return 80
break;
case 54:return 82
break;
case 55:return 91
break;
case 56:return 12
break;
case 57:return 5
break;
}
},
rules: [/^(?:\s+[ \t\r\n\f]\n\/\/.*[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/]([0-9]+))/i,/^(?:(([0-9]+)(\.([0-9]+))?))/i,/^(?:(('[^☼]')))/i,/^(?:(("[^"]*")))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:Console\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:bool\b)/i,/^(?:float\b)/i,/^(?:int\b)/i,/^(?:for\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:public\b)/i,/^(?:default\b)/i,/^(?:private\b)/i,/^(?:main\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:Console\b)/i,/^(?:write\b)/i,/^(?:do\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_P1;
exports.Parser = Grammar_P1.Parser;
exports.parse = function () { return Grammar_P1.parse.apply(Grammar_P1, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}